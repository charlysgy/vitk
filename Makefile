# Makefile pour le projet VTK-ITK
# ================================

# Variables
PYTHON = python3
PROJECT_DIR = .
DATA_DIR = Data
VENV_DIR = venv

# Couleurs pour l'affichage
BLUE = \033[34m
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
NC = \033[0m # No Color

.PHONY: help setup install run test clean lint format check-deps check-data docs

# Aide par d√©faut
help:
	@echo "$(BLUE)Projet VTK-ITK - Commandes disponibles:$(NC)"
	@echo ""
	@echo "$(GREEN)setup$(NC)      - Configuration initiale compl√®te"
	@echo "$(GREEN)install$(NC)    - Installation des d√©pendances"
	@echo "$(GREEN)run$(NC)        - Lance l'application principale"
	@echo "$(GREEN)test$(NC)       - Lance les tests unitaires"
	@echo "$(GREEN)check-deps$(NC) - V√©rifie les d√©pendances"
	@echo "$(GREEN)check-data$(NC) - V√©rifie la pr√©sence des donn√©es"
	@echo "$(GREEN)clean$(NC)      - Nettoie les fichiers temporaires"
	@echo "$(GREEN)lint$(NC)       - V√©rifie la qualit√© du code"
	@echo "$(GREEN)format$(NC)     - Formate le code (autopep8)"
	@echo "$(GREEN)docs$(NC)       - G√©n√®re la documentation"
	@echo ""
	@echo "$(YELLOW)Exemples:$(NC)"
	@echo "  make setup    # Configuration compl√®te"
	@echo "  make run      # Lance l'application"
	@echo "  make test     # Lance les tests"

# Configuration initiale
setup:
	@echo "$(BLUE)üîß Configuration initiale du projet...$(NC)"
	@$(PYTHON) setup.py
	@echo "$(GREEN)‚úì Configuration termin√©e$(NC)"

# Installation des d√©pendances
install:
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	@pip install scipy matplotlib numpy vtk itk
	@echo "$(GREEN)‚úì D√©pendances install√©es$(NC)"

# V√©rification des d√©pendances
check-deps:
	@echo "$(BLUE)üîç V√©rification des d√©pendances...$(NC)"
	@$(PYTHON) -c "import numpy; print('‚úì numpy:', numpy.__version__)" || echo "‚ùå numpy manquant"
	@$(PYTHON) -c "import vtk; print('‚úì vtk:', vtk.vtkVersion().GetVTKVersion())" || echo "‚ùå vtk manquant"
	@$(PYTHON) -c "import itk; print('‚úì itk disponible')" || echo "‚ùå itk manquant"

# V√©rification des donn√©es
check-data:
	@echo "$(BLUE)üìÑ V√©rification des fichiers de donn√©es...$(NC)"
	@test -d $(DATA_DIR) && echo "‚úì Dossier Data/ existe" || echo "‚ùå Dossier Data/ manquant"
	@test -f $(DATA_DIR)/case6_gre1.nrrd && echo "‚úì case6_gre1.nrrd trouv√©" || echo "‚ùå case6_gre1.nrrd manquant"
	@test -f $(DATA_DIR)/case6_gre2.nrrd && echo "‚úì case6_gre2.nrrd trouv√©" || echo "‚ùå case6_gre2.nrrd manquant"

# Lance l'application principale
run: check-deps check-data
	@echo "$(BLUE)üöÄ Lancement de l'application...$(NC)"
	@$(PYTHON) main.py

# Lance les exemples
examples:
	@echo "$(BLUE)üìñ Lancement des exemples...$(NC)"
	@$(PYTHON) examples.py

# Lance les tests
test:
	@echo "$(BLUE)üß™ Lancement des tests unitaires...$(NC)"
	@$(PYTHON) test_architecture.py

# Nettoyage
clean:
	@echo "$(BLUE)üßπ Nettoyage des fichiers temporaires...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete
	@find . -type f -name ".DS_Store" -delete
	@echo "$(GREEN)‚úì Nettoyage termin√©$(NC)"

# V√©rification de la qualit√© du code
lint:
	@echo "$(BLUE)üîç V√©rification de la qualit√© du code...$(NC)"
	@if command -v flake8 >/dev/null 2>&1; then \
		flake8 *.py --max-line-length=100 --ignore=E203,W503; \
		echo "$(GREEN)‚úì Lint termin√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  flake8 non install√©, installation...$(NC)"; \
		pip install flake8; \
		flake8 *.py --max-line-length=100 --ignore=E203,W503; \
	fi

# Formatage du code
format:
	@echo "$(BLUE)üé® Formatage du code...$(NC)"
	@if command -v autopep8 >/dev/null 2>&1; then \
		autopep8 --in-place --aggressive --aggressive *.py; \
		echo "$(GREEN)‚úì Formatage termin√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  autopep8 non install√©, installation...$(NC)"; \
		pip install autopep8; \
		autopep8 --in-place --aggressive --aggressive *.py; \
	fi

# G√©n√©ration de la documentation
docs:
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	@if command -v pydoc >/dev/null 2>&1; then \
		pydoc -w converters utils visualization config; \
		echo "$(GREEN)‚úì Documentation g√©n√©r√©e$(NC)"; \
	else \
		echo "$(RED)‚ùå pydoc non disponible$(NC)"; \
	fi

# Analyse de performance (si profileur disponible)
profile:
	@echo "$(BLUE)‚ö° Analyse de performance...$(NC)"
	@$(PYTHON) -m cProfile -o profile_output.prof main.py
	@echo "$(GREEN)‚úì Profil sauv√© dans profile_output.prof$(NC)"

# Cr√©ation d'un environnement virtuel
venv:
	@echo "$(BLUE)üè† Cr√©ation de l'environnement virtuel...$(NC)"
	@$(PYTHON) -m venv $(VENV_DIR)
	@echo "$(GREEN)‚úì Environnement virtuel cr√©√© dans $(VENV_DIR)/$(NC)"
	@echo "$(YELLOW)Activez-le avec: source $(VENV_DIR)/bin/activate$(NC)"

# Installation dans l'environnement virtuel
install-venv: venv
	@echo "$(BLUE)üì¶ Installation dans l'environnement virtuel...$(NC)"
	@$(VENV_DIR)/bin/pip install numpy vtk itk
	@echo "$(GREEN)‚úì Installation termin√©e$(NC)"

# Informations sur le projet
info:
	@echo "$(BLUE)‚ÑπÔ∏è  Informations sur le projet:$(NC)"
	@echo ""
	@echo "üìÅ Structure:"
	@find . -maxdepth 1 -name "*.py" -exec basename {} \; | sort
	@echo ""
	@echo "üìä Statistiques:"
	@echo "  Fichiers Python: $$(find . -name "*.py" | wc -l)"
	@echo "  Lignes de code: $$(find . -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $$1}')"
	@echo ""
	@echo "üóÇÔ∏è  Modules:"
	@echo "  - converters.py: Conversions ITK/NumPy/VTK"
	@echo "  - visualization.py: Interface interactive"
	@echo "  - utils.py: Utilitaires et debug"
	@echo "  - config.py: Configuration"
	@echo "  - main.py: Point d'entr√©e principal"

# Backup du projet
backup:
	@echo "$(BLUE)üíæ Sauvegarde du projet...$(NC)"
	@tar -czf backup_$(shell date +%Y%m%d_%H%M%S).tar.gz \
		--exclude="__pycache__" \
		--exclude="*.pyc" \
		--exclude="venv" \
		--exclude="backup_*.tar.gz" \
		.
	@echo "$(GREEN)‚úì Sauvegarde cr√©√©e$(NC)"

# V√©rification compl√®te avant commit
check-all: clean lint test
	@echo "$(GREEN)‚úÖ Toutes les v√©rifications pass√©es$(NC)"
